{"version":3,"sources":["components/elements/Header/Header.js","components/elements/HeroImage/HeroImage.js","components/elements/SearchBar/SearchBar.js","components/elements/FourColGrid/FourColGrid.js","components/elements/LoadMoreBtn/LoadMoreBtn.js","components/elements/Spinner/Spinner.js","components/Home/Home.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","alt","HeroImage","props","SearchBar","state","Component","FourColGrid","LoadMoreBtn","Spinner","Home","elements_HeroImage_HeroImage","elements_SearchBar_SearchBar","elements_FourColGrid_FourColGrid","elements_Spinner_Spinner","elements_LoadMoreBtn_LoadMoreBtn","App","elements_Header_Header","components_Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAgBeA,eAZA,WACX,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,IAAI,+BAA+BC,IAAI,cAClEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,IAAI,yBAAyBC,IAAI,qDCClEC,SARG,SAACC,GACf,OACIP,EAAAC,EAAAC,cAAA,0BCcOM,0NAbXC,MAAQ,2EAKJ,OACIT,EAAAC,EAAAC,cAAA,+BAPYQ,cCMTC,SARK,SAACJ,GACjB,OACIP,EAAAC,EAAAC,cAAA,4BCMOU,eARK,SAACL,GACjB,OACIP,EAAAC,EAAAC,cAAA,4BCKOW,SANC,WACZ,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aCwBRW,oNAjBXL,MAAQ,2EAKJ,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,cAZGT,cCCJU,EATH,WACR,OACIpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,QCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0a02e3c8.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\n\nconst Header = () => {\n    return (\n        // React.createElement('div', {classname: 'react_div'}, 'This is text'); //old way of creating an element\n        <div className=\"rmdb-header\">\n            <div className=\"rmdb-header-content\">\n                <img className=\"rmdb-logo\" src=\"./images/reactMovie_logo.png\" alt=\"rmdb-logo\" />\n                <img className=\"rmdb-tmdb-logo\" src=\"./images/tmdb_logo.png\" alt=\"tmdb-logo\" />\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './HeroImage.css';\n\nconst HeroImage = (props) => {\n    return (\n        <div>\n            HeroImage\n        </div>\n    )\n}\n\nexport default HeroImage;","import React, {Component} from 'react';\n// eslint-disable-next-line\nimport {FontAwesome} from '@fortawesome/react-fontawesome';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n    state = {\n\n    }\n\n    render(){\n        return(\n            <div>\n                SearchBar\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './FourColGrid.css';\n\nconst FourColGrid = (props) => {\n    return(\n        <div>\n            FourColGrid\n        </div>\n    )\n}\n\nexport default FourColGrid;","import React from 'react';\nimport './LoadMoreBtn.css';\n\nconst LoadMoreBtn = (props) => {\n    return(\n        <div>\n            LoadMoreBtn\n        </div>\n    )\n}\n\nexport default LoadMoreBtn;","import React from 'react';\nimport './Spinner.css';\n\n\nconst Spinner = () => {\n    return(\n        <div className=\"loader\"></div>\n    )\n}\n\nexport default Spinner;","import React, { Component } from 'react';\nimport HeroImage from '../elements/HeroImage/HeroImage';\nimport SearchBar from '../elements/SearchBar/SearchBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\n// eslint-disable-next-line\nimport MovieThumb from '../elements/MovieThumb/MovieThumb';\nimport LoadMoreBtn from '../elements/LoadMoreBtn/LoadMoreBtn';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Home.css';\n\n\n\nclass Home extends Component {\n    state = {\n\n    }\n\n    render() {\n        return(\n            <div className=\"rmdb-home\">\n                <HeroImage />\n                <SearchBar />\n                <FourColGrid />\n                <Spinner />\n                <LoadMoreBtn />\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Header from '../elements/Header/Header';\nimport Home from '../Home/Home';\n\nconst App = () => {\n    return (\n        <div>\n            <Header />\n            <Home />\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}